# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# rust-clippy is a tool that runs a bunch of lints to catch common
# mistakes in your Rust code and help improve your Rust code.
# More details at https://github.com/rust-lang/rust-clippy
# and https://rust-lang.github.io/rust-clippy/

# A more modern and optimized workflow for rust-clippy analysis.
name: Clippy Analysis

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "30 23 * * *" # Changed time slightly to avoid peak loads

jobs:
  clippy_check: # Renamed job for clarity
    name: Run Clippy Linter
    runs-on: ubuntu-latest

    permissions:
      contents: read
      # `security-events: write` is required to upload SARIF results to GitHub's code scanning.
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Use the latest version of checkout action

      - name: Install Rust toolchain
        # Use a more modern and efficient action for setting up the toolchain.
        # It handles caching automatically. `clippy` is included by default.
        uses: dtolnay/rust-toolchain@stable

      - name: Install SARIF tools with caching
        # This step uses cargo-binstall for faster installation and caches the tools.
        uses: baptiste0928/cargo-install@v3
        with:
          # `cargo-binstall` provides pre-compiled binaries, which is much faster than `cargo install`.
          tool: cargo-binstall
          # The tools we need for SARIF conversion.
          crates: clippy-sarif, sarif-fmt

      - name: Run Clippy and generate SARIF report
        # We run clippy with specific arguments to ensure it generates output even if there are no warnings.
        # The output is directly piped to the sarif conversion tools.
        # `continue-on-error` is important because clippy will exit with a non-zero code if it finds issues,
        # but we still want to upload the results.
        run: |
          cargo clippy \
            --all-targets \
            --all-features \
            --message-format=json \
            -- -D warnings | # Treat warnings as errors to ensure they are reported
          clippy-sarif | tee results.sarif | sarif-fmt
        continue-on-error: true

      - name: Upload SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3 # Use the latest version
        with:
          # Path to the SARIF file which will be uploaded to the Code Scanning tab.
          sarif_file: results.sarif
          # Category helps group multiple analysis tools in the UI.
          category: clippy
