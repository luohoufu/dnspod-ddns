name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CLICOLOR: 1

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  ci:
    permissions:
      contents: none
    name: CI
    needs: ["build"]
    runs-on: ubuntu-latest
    steps:
      - name: Failed
        run: exit 1
        if: "contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped')"
  msrv:
    name: "Check MSRV"
    runs-on: ubuntu-latest
    needs: ["tests"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@cargo-hack
      - name: Default features
        run: cargo hack check --feature-powerset --locked --rust-version --ignore-private --workspace --all-targets
  docs:
    name: Docs
    needs: ["tests", "codespell", "misspell", "spelling"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.86"
      - uses: Swatinem/rust-cache@v2
      - name: Check documentation
        env:
          RUSTDOCFLAGS: -D warnings
        run: cargo doc --workspace --all-features --no-deps --document-private-items
  tests:
    name: Tests
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        rust: ["stable"]
    needs: ["lints"]
    continue-on-error: ${{ matrix.rust != 'stable' }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@cargo-hack
      - name: Build
        run: cargo test --workspace --no-run
      - name: Default features
        run: cargo test --workspace
      - name: All features
        run: cargo test --workspace --all-features
      - name: No-default features
        run: cargo test --workspace --no-default-features
  lints:
    permissions:
      contents: none
    name: Lints
    needs:
      ["lockfile", "rustfmt", "clippy", "codespell", "misspell", "spelling"]
    runs-on: ubuntu-latest
    steps:
      - name: Failed
        run: exit 1
        if: "contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped')"
  lockfile:
    name: Lockfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
      - name: "Is lockfile updated?"
        run: cargo update --workspace --locked
  rustfmt:
    name: Rust Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.86"
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: Check formatting
        run: cargo fmt --all -- --check
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flag: ["", "--no-default-features", "--all-features"]
    permissions:
      security-events: write # to upload sarif results
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.86" # STABLE
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Install SARIF tools
        run: cargo install clippy-sarif --locked
      - name: Install SARIF tools
        run: cargo install sarif-fmt --locked
      - name: Check
        run: >
          cargo clippy --workspace ${{ matrix.flag }} --all-targets --message-format=json -- -D warnings --allow deprecated
          | clippy-sarif
          | tee clippy-results.sarif
          | sarif-fmt
        continue-on-error: true
      - name: Upload
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: clippy-results.sarif
          wait-for-processing: true
      - name: Report status
        run: cargo clippy --workspace ${{ matrix.flag }} --all-targets -- -D warnings --allow deprecated
  codespell:
    name: Codespell
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install codespell
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Check spelling with codespell
        run: codespell || exit 1
  misspell:
    name: Misspell
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install
        run: wget -O - -q https://git.io/misspell | sh -s -- -b .
      - name: Misspell
        run: ./misspell -error
  spelling:
    name: Typos
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Actions Repository
        uses: actions/checkout@v4
      - name: Spell Check Repo
        uses: crate-ci/typos@master
  leaks:
    name: Memory leaks
    needs: ["msrv", "docs"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install llvm
        # Required to resolve symbols in sanitizer output
        run: sudo apt-get install -y llvm

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@nightly

      - uses: Swatinem/rust-cache@v2

      - name: Build
        env:
          RUSTFLAGS: "-Z sanitizer=address"
        run: cargo build --target x86_64-unknown-linux-gnu --tests

      - name: Run tests with leak sanitizer
        env:
          RUSTFLAGS: "-Z sanitizer=address"
        run: cargo test
          --target x86_64-unknown-linux-gnu --tests
          -- --test-threads 1
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [leaks]
    env:
      RUSTFLAGS: "-D warnings"
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-gnu
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install cross
        uses: taiki-e/install-action@cross

      - name: Build
        run: cross build --all-features --all-targets --release --target=${{ matrix.target }}

  release:
    name: Publish version
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'release'
    needs: [build]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Query crate version
        run: echo "crate_version=$(cargo metadata --format-version=1 --no-deps | python -c "import sys,json; print('v' + json.load(sys.stdin)['packages'][0]['version'])")" >> $GITHUB_ENV

      - name: Query release tag version
        run: echo "release_tag_version=${{ github.event.release.name }}" >> $GITHUB_ENV

      - name: Print versions
        run: echo "Crate - ${{ env.crate_version }}, Release - ${{ env.release_tag_version }}"

      - name: Check version not empty
        run: test -n ${{ env.crate_version }}

      - name: Check matching versions
        run: test ${{ env.crate_version }} = ${{ env.release_tag_version }}

      - name: Cargo login
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

      - name: Cargo publish
        run: cargo publish
