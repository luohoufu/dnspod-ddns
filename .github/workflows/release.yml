name: Create release and upload binaries

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]*"

env:
  CARGO_TERM_COLOR: always

jobs:
  # Job to create the GitHub Release itself
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          # This creates a draft release. We will publish it in the final job.
          draft: true
          # The body of the release will be generated from the git tag message
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release-binaries:
    name: Build release binaries
    # Needs the upload_url from the create-release job to upload assets
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          # --- Linux Builds (using cross-compilation on a single runner) ---
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            asset_name: ddns-x86_64-unknown-linux-musl.tar.gz

          - target: i686-unknown-linux-musl
            os: ubuntu-latest
            asset_name: ddns-i686-unknown-linux-musl.tar.gz

          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            asset_name: ddns-aarch64-unknown-linux-musl.tar.gz

          - target: armv7-unknown-linux-musleabihf # Corrected target name for ARMv7
            os: ubuntu-latest
            asset_name: ddns-armv7-unknown-linux-musleabihf.tar.gz

          # --- macOS Builds (using native runners) ---
          - target: x86_64-apple-darwin
            os: macos-latest # Use macos-latest for better compatibility
            asset_name: ddns-x86_64-apple-darwin.tar.gz

          - target: aarch64-apple-darwin
            os: macos-latest
            asset_name: ddns-aarch64-apple-darwin.tar.gz

          # --- Windows Builds (using native runners) ---
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            asset_name: ddns-x86_64-pc-windows-msvc.zip

          - target: aarch64-pc-windows-msvc
            os: windows-latest
            asset_name: ddns-aarch64-pc-windows-msvc.zip

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable # Using a more modern action, defaults to stable
        with:
          targets: ${{ matrix.target }}

      # --- Linux specific setup for cross-compilation ---
      - name: Set up cross-compilation tools for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cross-build-essential-armhf cross-build-essential-arm64
          # Install cross, the cross-compilation tool
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binary
        # Use `cross` for Linux runners, and `cargo` for others
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            cross build --release --locked --target ${{ matrix.target }}
          else
            cargo build --release --locked --target ${{ matrix.target }}
          fi
        env:
          # This is needed for musl builds to link statically
          RUSTFLAGS: "-C target-feature=+crt-static"

      - name: Prepare artifact (create archive)
        shell: bash
        run: |
          # Define paths and names
          ARTIFACT_DIR="artifacts"
          RELEASE_DIR="target/${{ matrix.target }}/release"
          BINARY_NAME="ddns"

          # Adjust binary name for Windows
          if [ "${{ runner.os }}" == "Windows" ]; then
            BINARY_NAME="ddns.exe"
          fi

          # Create artifact directory
          mkdir -p $ARTIFACT_DIR

          # Move binary to a common location
          mv "${RELEASE_DIR}/${BINARY_NAME}" "${ARTIFACT_DIR}/"

          # Create archive
          cd $ARTIFACT_DIR
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a ../${{ matrix.asset_name }} .
          else
            tar czvf ../${{ matrix.asset_name }} .
          fi

      - name: Upload artifact to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    name: Publish Release and Generate Checksums
    needs: build-release-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          # This special pattern downloads all artifacts from the current workflow run
          pattern: release-asset-*
          path: release-assets
          merge-multiple: true # Merge all artifacts into one directory

      - name: Clean git tag & release
        if: startsWith(github.ref, 'refs/heads/master')
        run: |
          gh release delete latest --cleanup-tag --yes --repo $GITHUB_REPOSITORY || true
          # Move latest tag to current commit locally
          git tag latest -f || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean git tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Delete latest tag locally (for git-cliff)
          git tag -d latest || true

      - name: Generate a changelog
        uses: orhun/git-cliff-action@main
        id: git-cliff
        with:
          config: .github/cliff.toml
          args: --latest --strip header
        env:
          GITHUB_REPO: ${{ github.repository }}

      - name: Generate checksums
        run: |
          cd release-assets
          # Generate SHA256 checksums for all .gz and .zip files
          for file in *.gz *.zip; do
            sha256sum "$file" > "${file}.sha256"
          done
          # Create a single file with all checksums for easy verification
          sha256sum *.gz *.zip > sha256sums.txt

      - name: Upload checksums to release
        uses: softprops/action-gh-release@v2
        with:
          # This uploads the checksum files to the existing draft release
          files: |
            release-assets/*.sha256
            release-assets/sha256sums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish the release
        uses: softprops/action-gh-release@v2
        with:
          # By setting draft to false on the same tag, it publishes the release
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
