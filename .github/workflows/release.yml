name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]*"

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: "ddns"

jobs:
  build-and-upload:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          - target: i686-unknown-linux-musl
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04
          - target: armv7-unknown-linux-musleabihf
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-2019
          - target: aarch64-pc-windows-msvc
            os: windows-2019

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      - name: Set up cross-compilation tools (for Linux)
        if: runner.os == 'Linux'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binary
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            cross build --release --locked --target ${{ matrix.target }}
          else
            cargo build --release --locked --target ${{ matrix.target }}
          fi
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"

      - name: Prepare artifact name and path
        id: prep
        shell: bash
        run: |
          OS_NAME="${{ matrix.target }}"
          ASSET_EXT=".tar.gz"
          if [ "${{ runner.os }}" == "Windows" ]; then
            ASSET_EXT=".zip"
          fi
          ASSET_NAME="${{ env.BINARY_NAME }}-${OS_NAME}${ASSET_EXT}"
          ASSET_PATH="target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${ASSET_EXT}"
          mkdir -p target/${{ matrix.target }}/release
          echo "asset_name=${ASSET_NAME}" >> $GITHUB_OUTPUT
          echo "asset_path=${ASSET_PATH}" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Package artifact
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a $GITHUB_WORKSPACE/${{ steps.prep.outputs.asset_name }} ${{ env.BINARY_NAME }}.exe
          else
            tar czvf $GITHUB_WORKSPACE/${{ steps.prep.outputs.asset_name }} ${{ env.BINARY_NAME }}
          fi
          ls -lr $GITHUB_WORKSPACE

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-asset-${{ matrix.target }}
          path: ${{ steps.prep.outputs.asset_path }}

  create-and-publish-release:
    name: Create and Publish Release
    needs: build-and-upload
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: --verbose
        env:
          OUTPUT: CHANGELOG.md

      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          pattern: release-asset-*
          merge-multiple: true

      - name: Generate checksums
        run: |
          cd release-assets
          sha25um *.tar.gz *.zip > sha256sums.txt
          cp $GITHUB_WORKSPACE/CHANGELOG.md .

      - name: Generate Changelog
        id: changelog
        run: |
          echo 'body=$(cat $GITHUB_WORKSPACE/CHANGELOG.md)' >> "$GITHUB_OUTPUT"

      - name: Create and Publish Release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.changelog.outputs.body }}
          files: |
            release-assets/*.tar.gz
            release-assets/*.zip
            release-assets/*.md
            release-assets/sha256sums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
